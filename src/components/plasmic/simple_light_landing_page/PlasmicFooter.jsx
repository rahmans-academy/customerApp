// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: pgAR3D4uAdvnkKcV9w1BHJ
// Component: Kbpd9C9jD6Eq
import * as React from "react";
import {
  Stack as Stack__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateStateOnChangeProp,
  generateStateValueProp,
  useCurrentUser,
  useDollarState
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import IconLink from "../../IconLink"; // plasmic-import: XE63fghuj-fY/component
import TextInput from "../../TextInput"; // plasmic-import: BMOwZhaJYxua/component
import Button from "../../Button"; // plasmic-import: tgtNFqUlQdMk/component
import { useScreenVariants as useScreenVariantsro01UftylU04 } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: RO01UftylU04/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_library_plasmic_color_type_css from "../library_plasmic_color_type/plasmic_library_plasmic_color_type.module.css"; // plasmic-import: seaQhLVS4bbjiGvJJrRwyL/projectcss
import projectcss from "./plasmic_simple_light_landing_page.module.css"; // plasmic-import: pgAR3D4uAdvnkKcV9w1BHJ/projectcss
import sty from "./PlasmicFooter.module.css"; // plasmic-import: Kbpd9C9jD6Eq/css
import LogoIcon from "./icons/PlasmicIcon__Logo"; // plasmic-import: H4jd2ebqXgyI/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: G1zMOd__PrRA/icon
import TwitterIconIcon from "./icons/PlasmicIcon__TwitterIcon"; // plasmic-import: M2S4pLY-EPf7/icon
import GithubIconIcon from "./icons/PlasmicIcon__GithubIcon"; // plasmic-import: zrUWgcpEF217/icon
import FacebookIconIcon from "./icons/PlasmicIcon__FacebookIcon"; // plasmic-import: 2b4u4Mb4BWsT/icon

createPlasmicElementProxy;

export const PlasmicFooter__VariantProps = new Array();

export const PlasmicFooter__ArgProps = new Array();

const $$ = {};

function PlasmicFooter__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = useCurrentUser?.() || {};
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "textInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsro01UftylU04()
  });
  return (
    <Stack__
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_library_plasmic_color_type_css.plasmic_tokens,
        sty.root
      )}
    >
      <div className={classNames(projectcss.all, sty.freeBox__aHqYq)} />
      <Stack__
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__ugyQ)}
      >
        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__sausq)}
        >
          <IconLink
            className={classNames("__wab_instance", sty.iconLink__erKzd)}
            icon={
              <LogoIcon
                className={classNames(projectcss.all, sty.svg___2Mw5V)}
                role={"img"}
              />
            }
          />

          <div className={classNames(projectcss.all, sty.freeBox__vV0Z)}>
            <a
              className={classNames(
                projectcss.all,
                projectcss.a,
                projectcss.__wab_text,
                sty.link__oNds
              )}
              href={"#"}
            >
              {"Terms"}
            </a>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__ywZmM
              )}
            >
              {" \u00b7 "}
            </div>
            <a
              className={classNames(
                projectcss.all,
                projectcss.a,
                projectcss.__wab_text,
                sty.link___0J4Gj
              )}
              href={"#"}
            >
              {"Privacy"}
            </a>
          </div>
        </Stack__>
        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__q6UdS)}
        >
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__sgFj6)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__j2Lvh
              )}
            >
              {"Products"}
            </div>
            <a
              className={classNames(
                projectcss.all,
                projectcss.a,
                projectcss.__wab_text,
                sty.link___93DPv
              )}
              href={"#"}
            >
              {"Web Studio"}
            </a>
            <a
              className={classNames(
                projectcss.all,
                projectcss.a,
                projectcss.__wab_text,
                sty.link__cCszb
              )}
              href={"#"}
            >
              {"DynamicBox Flex"}
            </a>
            <a
              className={classNames(
                projectcss.all,
                projectcss.a,
                projectcss.__wab_text,
                sty.link__jzk3Z
              )}
              href={"#"}
            >
              {"Programming Forms"}
            </a>
            <a
              className={classNames(
                projectcss.all,
                projectcss.a,
                projectcss.__wab_text,
                sty.link__edIom
              )}
              href={"#"}
            >
              {"Integrations"}
            </a>
            <a
              className={classNames(
                projectcss.all,
                projectcss.a,
                projectcss.__wab_text,
                sty.link__jRw0G
              )}
              href={"#"}
            >
              {"Command-line"}
            </a>
          </Stack__>
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__q7XeG)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__gnAkS
              )}
            >
              {"Resources"}
            </div>
            <a
              className={classNames(
                projectcss.all,
                projectcss.a,
                projectcss.__wab_text,
                sty.link__iq1Y
              )}
              href={"#"}
            >
              {"Documentation"}
            </a>
            <a
              className={classNames(
                projectcss.all,
                projectcss.a,
                projectcss.__wab_text,
                sty.link__miqc3
              )}
              href={"#"}
            >
              {"Tutorials & Guides"}
            </a>
            <a
              className={classNames(
                projectcss.all,
                projectcss.a,
                projectcss.__wab_text,
                sty.link__e3JIi
              )}
              href={"#"}
            >
              {"Blog"}
            </a>
            <a
              className={classNames(
                projectcss.all,
                projectcss.a,
                projectcss.__wab_text,
                sty.link__rkVn9
              )}
              href={"#"}
            >
              {"Support Center"}
            </a>
            <a
              className={classNames(
                projectcss.all,
                projectcss.a,
                projectcss.__wab_text,
                sty.link__h8VlW
              )}
              href={"#"}
            >
              {"Partners"}
            </a>
          </Stack__>
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__ycEl)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___26Sgc
              )}
            >
              {"Company"}
            </div>
            <a
              className={classNames(
                projectcss.all,
                projectcss.a,
                projectcss.__wab_text,
                sty.link__dFfHd
              )}
              href={"#"}
            >
              {"Home"}
            </a>
            <a
              className={classNames(
                projectcss.all,
                projectcss.a,
                projectcss.__wab_text,
                sty.link__aYxYk
              )}
              href={"#"}
            >
              {"About us"}
            </a>
            <a
              className={classNames(
                projectcss.all,
                projectcss.a,
                projectcss.__wab_text,
                sty.link___8Ytj
              )}
              href={"#"}
            >
              {"Company values"}
            </a>
            <a
              className={classNames(
                projectcss.all,
                projectcss.a,
                projectcss.__wab_text,
                sty.link__euUp
              )}
              href={"#"}
            >
              {"Pricing"}
            </a>
            <a
              className={classNames(
                projectcss.all,
                projectcss.a,
                projectcss.__wab_text,
                sty.link__zlF1H
              )}
              href={"#"}
            >
              {"Privacy policy"}
            </a>
          </Stack__>
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__jsaoq)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__i4INm
              )}
            >
              {"Subscribe"}
            </div>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__ii8NH
              )}
            >
              {"Get the latest news and articles to your inbox every month."}
            </div>
            <TextInput
              data-plasmic-name={"textInput"}
              data-plasmic-override={overrides.textInput}
              className={classNames("__wab_instance", sty.textInput)}
              endIcon={
                <Button
                  data-plasmic-name={"button"}
                  data-plasmic-override={overrides.button}
                  className={classNames("__wab_instance", sty.button)}
                  color={"clear"}
                  size={"compact"}
                  startIcon={
                    <IconIcon
                      className={classNames(projectcss.all, sty.svg___4NbVi)}
                      role={"img"}
                    />
                  }
                  submitsForm={true}
                >
                  <IconIcon
                    className={classNames(projectcss.all, sty.svg__gbfdj)}
                    role={"img"}
                  />
                </Button>
              }
              fontSize={"small"}
              onChange={(...eventArgs) => {
                generateStateOnChangeProp($state, ["textInput", "value"])(
                  (e => e.target?.value).apply(null, eventArgs)
                );
              }}
              placeholder={"Your email"}
              showEndIcon={true}
              value={
                generateStateValueProp($state, ["textInput", "value"]) ?? ""
              }
            />
          </Stack__>
        </Stack__>
      </Stack__>
      <div className={classNames(projectcss.all, sty.freeBox__wZfjA)} />
      <Stack__
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox___6GD5Z)}
      >
        <div className={classNames(projectcss.all, sty.freeBox__tqluF)}>
          <a
            className={classNames(
              projectcss.all,
              projectcss.a,
              projectcss.__wab_text,
              sty.link___1SOin
            )}
            href={"https://cruip.com/"}
          >
            {"Designed by Cruip. "}
          </a>
          <a
            className={classNames(
              projectcss.all,
              projectcss.a,
              projectcss.__wab_text,
              sty.link__cp5Tk
            )}
            href={"https://www.plasmic.app/"}
          >
            {"Built in Plasmic. "}
          </a>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__b6N
            )}
          >
            {"All rights reserved."}
          </div>
        </div>
        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__s9Mcd)}
        >
          <IconLink
            className={classNames("__wab_instance", sty.iconLink__xwcp)}
            icon={
              <TwitterIconIcon
                className={classNames(projectcss.all, sty.svg___7Yx3H)}
                role={"img"}
              />
            }
          />

          <IconLink
            className={classNames("__wab_instance", sty.iconLink__tyCz9)}
            icon={
              <GithubIconIcon
                className={classNames(projectcss.all, sty.svg__a6Jkx)}
                role={"img"}
              />
            }
          />

          <IconLink
            className={classNames("__wab_instance", sty.iconLink__qtNdK)}
            icon={
              <FacebookIconIcon
                className={classNames(projectcss.all, sty.svg__iE4BC)}
                role={"img"}
              />
            }
          />
        </Stack__>
      </Stack__>
    </Stack__>
  );
}

const PlasmicDescendants = {
  root: ["root", "textInput", "button"],
  textInput: ["textInput", "button"],
  button: ["button"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicFooter__ArgProps,
          internalVariantPropNames: PlasmicFooter__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicFooter__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicFooter";
  } else {
    func.displayName = `PlasmicFooter.${nodeName}`;
  }
  return func;
}

export const PlasmicFooter = Object.assign(
  // Top-level PlasmicFooter renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    textInput: makeNodeComponent("textInput"),
    button: makeNodeComponent("button"),
    // Metadata about props expected for PlasmicFooter
    internalVariantProps: PlasmicFooter__VariantProps,
    internalArgProps: PlasmicFooter__ArgProps
  }
);

export default PlasmicFooter;
/* prettier-ignore-end */
